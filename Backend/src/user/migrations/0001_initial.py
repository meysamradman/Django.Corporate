# Generated by Django 5.2.7 on 2025-10-11 11:38

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('media', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomPermission',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('codename', models.CharField(db_index=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Permission (Legacy)',
                'verbose_name_plural': 'Permissions (Legacy)',
                'db_table': 'custom_permissions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_superuser', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Role (Legacy)',
                'verbose_name_plural': 'Roles (Legacy)',
                'db_table': 'roles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('mobile', models.CharField(blank=True, help_text="User's mobile number, unique and used as primary identifier", max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator('^09\\d{9}$', 'Enter a valid Iranian mobile number')], verbose_name='Mobile Number')),
                ('email', models.EmailField(blank=True, help_text="User's email address, optional but unique", max_length=254, null=True, unique=True, verbose_name='Email')),
                ('user_type', models.CharField(choices=[('user', 'User'), ('admin', 'Admin User')], db_index=True, default='user', help_text='Type of user: user (website) or admin (panel)', max_length=10, verbose_name='User Type')),
                ('is_staff', models.BooleanField(db_index=True, default=False, help_text='Designates whether user can log into admin panel', verbose_name='Staff Status')),
                ('is_superuser', models.BooleanField(db_index=True, default=False, help_text='Designates that user has all permissions without explicitly assigning them', verbose_name='Superuser Status')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this user should be treated as active', verbose_name='Active Status')),
                ('is_admin_active', models.BooleanField(db_index=True, default=False, help_text='Designates whether user can access admin panel', verbose_name='Admin Active Status')),
                ('is_admin_full', models.BooleanField(db_index=True, default=False, help_text='Designates admin with full access and bypass all permissions', verbose_name='Full Admin Access')),
                ('last_login_admin', models.DateTimeField(blank=True, db_index=True, help_text='Last time user logged into admin panel', null=True, verbose_name='Last Admin Login')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when user was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when user was last updated', verbose_name='Updated At')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='AdminRole',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(db_index=True, help_text='Role name for admin panel (can be custom or predefined)', max_length=50, unique=True, verbose_name='Role Name')),
                ('display_name', models.CharField(help_text='Human-readable role name', max_length=100, verbose_name='Display Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of this role', verbose_name='Description')),
                ('permissions', models.JSONField(default=dict, help_text="JSON structure: {'modules': ['users', 'media'], 'actions': ['read', 'create', 'update']}", verbose_name='Permissions')),
                ('level', models.PositiveIntegerField(db_index=True, default=5, help_text='Role hierarchy level (1=highest, 10=lowest)', verbose_name='Role Level')),
                ('is_system_role', models.BooleanField(default=True, help_text='System roles cannot be deleted', verbose_name='System Role')),
            ],
            options={
                'verbose_name': 'Admin Role',
                'verbose_name_plural': 'Admin Roles',
                'db_table': 'admin_roles',
                'ordering': ['level', 'name'],
                'indexes': [models.Index(fields=['name', 'is_active'], name='admin_role_name_active_idx'), models.Index(fields=['level'], name='admin_role_level_idx'), models.Index(fields=['public_id'], name='admin_role_public_id_idx')],
            },
        ),
        migrations.CreateModel(
            name='AdminUserRole',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Assigned At')),
                ('expires_at', models.DateTimeField(blank=True, db_index=True, help_text='Optional expiry date for this role assignment', null=True, verbose_name='Expires At')),
                ('permissions_cache', models.JSONField(blank=True, default=dict, help_text='Cached permissions for performance', verbose_name='Permissions Cache')),
                ('last_cache_update', models.DateTimeField(auto_now=True, verbose_name='Last Cache Update')),
                ('assigned_by', models.ForeignKey(help_text='Super admin who assigned this role', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_admin_roles', to=settings.AUTH_USER_MODEL, verbose_name='Assigned By')),
                ('role', models.ForeignKey(help_text='Role assigned to the admin user', on_delete=django.db.models.deletion.CASCADE, to='user.adminrole', verbose_name='Admin Role')),
                ('user', models.ForeignKey(help_text='Admin user for this role assignment', limit_choices_to={'is_staff': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Admin User')),
            ],
            options={
                'verbose_name': 'Admin User Role',
                'verbose_name_plural': 'Admin User Roles',
                'db_table': 'admin_user_roles',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(db_index=True, help_text='Name of the Iranian province', max_length=50, unique=True, verbose_name='Province Name')),
                ('code', models.CharField(db_index=True, help_text='Unique code for the province', max_length=3, unique=True, verbose_name='Province Code')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this province is active', verbose_name='Active Status')),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
                'db_table': 'provinces',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='province_name_idx'), models.Index(fields=['code'], name='province_code_idx'), models.Index(fields=['is_active', 'name'], name='province_active_name_idx'), models.Index(fields=['public_id'], name='province_public_id_idx')],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(db_index=True, help_text='Name of the city', max_length=50, verbose_name='City Name')),
                ('code', models.CharField(db_index=True, help_text='Unique code for the city within province', max_length=5, verbose_name='City Code')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this city is active', verbose_name='Active Status')),
                ('province', models.ForeignKey(help_text='The province this city belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='user.province', verbose_name='Province')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'db_table': 'cities',
                'ordering': ['province__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('first_name', models.CharField(blank=True, help_text="Admin's first name.", max_length=50, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, help_text="Admin's last name.", max_length=50, null=True, verbose_name='Last Name')),
                ('birth_date', models.DateField(blank=True, help_text="Admin's birth date.", null=True, verbose_name='Birth Date')),
                ('national_id', models.CharField(blank=True, help_text="Admin's national ID (unique).", max_length=20, null=True, unique=True, verbose_name='National ID')),
                ('address', models.TextField(blank=True, help_text="Admin's address.", null=True, verbose_name='Address')),
                ('phone', models.CharField(blank=True, db_index=True, help_text="Admin's additional phone number (different from mobile for authentication)", max_length=15, null=True, verbose_name='Phone Number')),
                ('bio', models.TextField(blank=True, help_text='Brief description about the admin.', null=True, verbose_name='Biography')),
                ('admin_user', models.OneToOneField(help_text='The admin user this profile belongs to.', limit_choices_to={'is_staff': True}, on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to=settings.AUTH_USER_MODEL, verbose_name='Admin Profile')),
                ('profile_picture', models.ForeignKey(blank=True, help_text="Admin's profile picture", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_profiles', to='media.imagemedia', verbose_name='Profile Picture')),
                ('city', models.ForeignKey(blank=True, help_text="Admin's city", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_profiles', to='user.city', verbose_name='City')),
                ('province', models.ForeignKey(blank=True, help_text="Admin's province", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_profiles', to='user.province', verbose_name='Province')),
            ],
            options={
                'verbose_name': 'Admin Profile',
                'verbose_name_plural': 'Admin Profiles',
                'db_table': 'admin_profiles',
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.custompermission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.role')),
            ],
            options={
                'db_table': 'role_permissions',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('first_name', models.CharField(blank=True, help_text='The first name of the user.', max_length=30, null=True, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, help_text='The last name of the user.', max_length=30, null=True, verbose_name='Last name')),
                ('birth_date', models.DateField(blank=True, help_text='The birth date of the user.', null=True, verbose_name='Birth date')),
                ('national_id', models.CharField(blank=True, help_text='The national ID of the user (unique).', max_length=20, null=True, unique=True, verbose_name='National id')),
                ('address', models.TextField(blank=True, help_text='The address of the user.', null=True, verbose_name='Address')),
                ('phone', models.CharField(blank=True, db_index=True, help_text="User's additional phone number (different from mobile for authentication)", max_length=15, null=True, verbose_name='Phone Number')),
                ('bio', models.TextField(blank=True, help_text='A short biography or description about the user.', null=True, verbose_name='Biography')),
                ('city', models.ForeignKey(blank=True, help_text="User's city", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_profiles', to='user.city', verbose_name='City')),
                ('profile_picture', models.ForeignKey(blank=True, help_text="User's profile picture", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_profiles', to='media.imagemedia', verbose_name='Profile Picture')),
                ('province', models.ForeignKey(blank=True, help_text="User's province", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_profiles', to='user.province', verbose_name='Province')),
                ('user', models.OneToOneField(help_text='The user this profile belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL, verbose_name='User profile')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('public_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for public-facing operations', unique=True, verbose_name='Public ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active', verbose_name='Active Status')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Date and time when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated At')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Role (Legacy)',
                'verbose_name_plural': 'User Roles (Legacy)',
                'db_table': 'user_roles',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type', 'is_admin_active'], name='user_type_admin_active_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_admin_full', 'is_active'], name='user_admin_full_active_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['mobile'], name='user_mobile_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_login_admin'], name='user_last_login_admin_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['public_id'], name='user_public_id_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'user_type'], name='user_active_type_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_staff', 'is_admin_active'], name='user_staff_admin_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('mobile__isnull', False), ('email__isnull', False), _connector='OR'), name='user_mobile_or_email_required'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('is_admin_full', False), models.Q(('is_admin_full', True), ('is_staff', True), ('is_admin_active', True)), _connector='OR'), name='super_admin_must_be_staff_with_panel_access'),
        ),
        migrations.AddIndex(
            model_name='adminuserrole',
            index=models.Index(fields=['user', 'is_active'], name='adm_usr_role_usr_act_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuserrole',
            index=models.Index(fields=['role', 'is_active'], name='adm_usr_role_role_act_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuserrole',
            index=models.Index(fields=['expires_at'], name='adm_usr_role_exp_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuserrole',
            index=models.Index(fields=['public_id'], name='adm_usr_role_pub_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='adminuserrole',
            unique_together={('user', 'role')},
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['province', 'name'], name='city_province_name_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['name'], name='city_name_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['code'], name='city_code_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['is_active', 'province'], name='city_active_province_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['public_id'], name='city_public_id_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('province', 'code')},
        ),
        migrations.AddIndex(
            model_name='adminprofile',
            index=models.Index(fields=['admin_user'], name='admin_profile_user_idx'),
        ),
        migrations.AddIndex(
            model_name='adminprofile',
            index=models.Index(fields=['national_id'], name='admin_profile_national_id_idx'),
        ),
        migrations.AddIndex(
            model_name='adminprofile',
            index=models.Index(fields=['public_id'], name='admin_profile_public_id_idx'),
        ),
        migrations.AddIndex(
            model_name='adminprofile',
            index=models.Index(fields=['profile_picture'], name='admin_profile_pic_idx'),
        ),
        migrations.AddIndex(
            model_name='adminprofile',
            index=models.Index(fields=['phone'], name='admin_profile_phone_idx'),
        ),
        migrations.AddIndex(
            model_name='adminprofile',
            index=models.Index(fields=['province'], name='admin_profile_province_idx'),
        ),
        migrations.AddIndex(
            model_name='adminprofile',
            index=models.Index(fields=['city'], name='admin_profile_city_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rolepermission',
            unique_together={('role', 'permission')},
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user'], name='user_profile_user_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['national_id'], name='user_profile_national_id_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['public_id'], name='user_profile_public_id_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['profile_picture'], name='user_profile_pic_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['phone'], name='user_profile_phone_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['province'], name='user_profile_province_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['city'], name='user_profile_city_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrole',
            unique_together={('user', 'role')},
        ),
    ]
