# مستندات پیاده‌سازی لودینگ مشابه Strapi در Next.js

## مقدمه

این مستندات نحوه پیاده‌سازی سیستم لودینگ مشابه Strapi در پروژه Next.js را توضیح می‌دهد. بر اساس بررسی دقیق کدهای Strapi، سیستم لودینگ آن شامل چندین بخش اصلی است:

1. **Loader Component** - کامپوننت اصلی لودینگ
2. **Table Loading** - لودینگ جداول
3. **Page Loading** - لودینگ صفحات
4. **Skeleton Loading** - لودینگ اسکلتون

## 1. کامپوننت Loader اصلی (بر اساس کد واقعی Strapi)

### 1.1 ساختار کامپوننت Loader

```typescript
// components/ui/loader.tsx
import React from 'react';
import { styled, keyframes } from 'styled-components';

// SVG loader دقیق مشابه Strapi
const loaderSvg = "data:image/svg+xml,%3csvg%20width='63'%20height='63'%20viewBox='0%200%2063%2063'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M42.5563%2011.9816C39.484%2010.3071%2035.8575%209.29097%2032.3354%209.13521C28.6443%208.92888%2024.8295%209.72318%2021.3336%2011.4129C20.9123%2011.5901%2020.5376%2011.8101%2020.1722%2012.0249L20.0108%2012.1179C19.8774%2012.1951%2019.7441%2012.2724%2019.608%2012.3536C19.3253%2012.5146%2019.0492%2012.6744%2018.7544%2012.8792C18.5463%2013.0329%2018.3395%2013.1759%2018.1301%2013.323C17.5658%2013.7208%2016.9868%2014.1317%2016.4983%2014.5979C14.8476%2015.9524%2013.5571%2017.6075%2012.6071%2018.9214C10.4365%2022.1566%209.08622%2025.9567%208.80702%2029.6143L8.7764%2030.1588C8.73328%2030.9196%208.68476%2031.7057%208.75353%2032.4555C8.76648%2032.6084%208.7661%2032.7638%208.77506%2032.914C8.78895%2033.229%208.80152%2033.5373%208.846%2033.8672L9.07396%2035.4221C9.09756%2035.5764%209.1198%2035.7413%209.1633%2035.9263L9.65919%2037.9272L10.138%2039.2823C10.2729%2039.6673%2010.4158%2040.0751%2010.6%2040.43C12.0292%2043.637%2014.1425%2046.4578%2016.7063%2048.585C19.0508%2050.5296%2021.824%2052.0023%2024.7491%2052.8452L26.2371%2053.2376C26.3781%2053.2693%2026.4926%2053.2889%2026.6031%2053.3058L26.7775%2053.3311C27.0052%2053.3636%2027.2195%2053.3986%2027.4445%2053.435C27.8598%2053.5076%2028.2672%2053.5748%2028.7079%2053.6183L30.5641%2053.7229C30.9516%2053.7249%2031.3352%2053.7068%2031.7081%2053.6874C31.9039%2053.681%2032.0984%2053.6681%2032.3288%2053.662C34.5253%2053.4772%2036.5106%2053.0634%2038.0516%2052.4652C38.1769%2052.4171%2038.3008%2052.3796%2038.4234%2052.3355C38.6727%2052.2499%2038.9259%2052.167%2039.1432%2052.0599L40.8591%2051.2626L42.5702%2050.266C42.9009%2050.0682%2043.0205%2049.6414%2042.8282%2049.2984C42.632%2048.9526%2042.2034%2048.8308%2041.8634%2049.0166L40.1792%2049.9218L38.4995%2050.6224C38.3169%2050.6953%2038.121%2050.7534%2037.9224%2050.8155C37.7838%2050.8489%2037.6518%2050.8983%2037.5012%2050.9408C36.0711%2051.435%2034.2445%2051.7425%2032.244%2051.8346C32.0442%2051.8383%2031.8471%2051.8379%2031.654%2051.8403C31.3051%2051.8414%2030.9602%2051.8451%2030.6392%2051.8305L28.9177%2051.6725C28.5476%2051.619%2028.1695%2051.5427%2027.7848%2051.4678C27.5639%2051.4167%2027.3376%2051.3737%2027.1299%2051.3374L26.9529%2051.2987C26.8704%2051.2834%2026.7772%2051.2667%2026.7333%2051.2543L25.3466%2050.8322C22.7651%2049.9789%2020.33%2048.5729%2018.2942%2046.7557C16.1056%2044.7951%2014.3339%2042.2335%2013.1742%2039.3582C12.0276%2036.6013%2011.5988%2033.2792%2011.9716%2030.0076C12.3145%2027.0213%2013.3948%2024.1635%2015.1858%2021.5083C15.3034%2021.3339%2015.421%2021.1596%2015.5212%2021.0196C16.4309%2019.8688%2017.5408%2018.5589%2018.9483%2017.496C19.3367%2017.1525%2019.7862%2016.856%2020.2611%2016.5478C20.4878%2016.4009%2020.7079%2016.2553%2020.8907%2016.1306C21.0974%2016.0048%2021.3188%2015.8831%2021.5348%2015.7694C21.6761%2015.6975%2021.8162%2015.619%2021.9388%2015.5576L22.1002%2015.4646C22.4002%2015.3037%2022.6749%2015.1546%2022.9908%2015.039L24.1186%2014.5715C24.3399%2014.4844%2024.5718%2014.4159%2024.7997%2014.3447C24.953%2014.2982%2025.0982%2014.2635%2025.2635%2014.2078C25.786%2014.0182%2026.3283%2013.9112%2026.9105%2013.7965C27.117%2013.7571%2027.3302%2013.7163%2027.5608%2013.6585C27.7553%2013.611%2027.9737%2013.5969%2028.2082%2013.5762C28.364%2013.5603%2028.5172%2013.5483%2028.6318%2013.5333C28.7876%2013.5173%2028.9342%2013.5066%2029.0927%2013.4867C29.3285%2013.4555%2029.5456%2013.4347%2029.7494%2013.4337C30.0237%2013.44%2030.2994%2013.4357%2030.5777%2013.4274C31.0811%2013.421%2031.5579%2013.4197%2032.0318%2013.4914C34.9664%2013.7352%2037.7144%2014.6085%2040.2052%2016.0868C42.3489%2017.3655%2044.2716%2019.1525%2045.7607%2021.264C47.0255%2023.0628%2047.9756%2025.0528%2048.4928%2027.0393C48.572%2027.3176%2048.6299%2027.5931%2048.6839%2027.8659C48.7154%2028.0428%2048.7563%2028.2145%2048.7892%2028.3636C48.8037%2028.4541%2048.8208%2028.5406%2048.8445%2028.6258C48.8749%2028.7443%2048.8986%2028.864%2048.9116%2028.9651L48.9793%2029.6047C48.9922%2029.7748%2049.0132%2029.9331%2049.0301%2030.0887C49.0668%2030.3268%2049.0889%2030.5608%2049.0964%2030.7561L49.1083%2031.9001C49.1312%2032.3307%2049.089%2032.7116%2049.0522%2033.0673C49.0384%2033.2598%2049.0126%2033.4443%2049.0123%2033.5824C48.9961%2033.6926%2048.9918%2033.7935%2048.9836%2033.8917C48.9753%2034.0072%2048.9724%2034.1148%2048.9414%2034.2554L48.5449%2036.3059C48.3134%2037.8623%2049.3793%2039.3365%2050.9488%2039.5822C52.0417%2039.7601%2053.1536%2039.2819%2053.7711%2038.3664C54.0063%2038.0176%2054.1604%2037.6257%2054.2227%2037.2064L54.5217%2035.2574C54.5514%2035.0756%2054.572%2034.83%2054.5846%2034.5791L54.6028%2034.2338C54.6098%2034.0598%2054.6223%2033.8779%2054.6347%2033.6788C54.6734%2033.1052%2054.7163%2032.4479%2054.6619%2031.8058L54.5867%2030.4289C54.5622%2030.0952%2054.5097%2029.76%2054.4559%2029.4181C54.431%2029.2572%2054.4048%2029.0896%2054.3826%2028.9074L54.2687%2028.104C54.2332%2027.9244%2054.1804%2027.7273%2054.1329%2027.5396L54.0643%2027.2454C54.0195%2027.071%2053.9773%2026.8927%2053.9338%2026.7076C53.8455%2026.3309%2053.7479%2025.9422%2053.613%2025.5571C52.84%2023.0292%2051.5383%2020.5194%2049.8338%2018.2799C47.8544%2015.682%2045.3333%2013.5087%2042.5563%2011.9816Z'%20fill='%234945FF'/%3e%3c/svg%3e";

// انیمیشن چرخشی دقیق مشابه Strapi
const rotation = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
`;

// کامپوننت LoaderImg دقیق مشابه Strapi
const LoaderImg = styled.img`
  animation: ${rotation} 1s infinite linear;
  will-change: transform;
  ${({ $small, theme }) => $small && `width: ${theme.spaces[6]}; height: ${theme.spaces[6]};`}
`;

interface LoaderProps extends React.HTMLAttributes<HTMLDivElement> {
  children?: React.ReactNode;
  small?: boolean;
}

// کامپوننت Loader اصلی دقیق مشابه Strapi
const Loader = React.forwardRef<HTMLDivElement, LoaderProps>(
  ({ children, small = false, ...props }, ref) => {
    return (
      <div role="alert" aria-live="assertive" ref={ref} {...props}>
        {children && <VisuallyHidden>{children}</VisuallyHidden>}
        <LoaderImg 
          src={loaderSvg} 
          aria-hidden="true" 
          $small={small}
        />
      </div>
    );
  }
);

Loader.displayName = 'Loader';

export { Loader };
```

### 1.2 کامپوننت VisuallyHidden (دقیق مشابه Strapi)

```typescript
// components/ui/visually-hidden.tsx
import React from 'react';
import { styled } from 'styled-components';

const Span = styled.span`
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
`;

interface VisuallyHiddenProps {
  children: React.ReactNode;
  tag?: keyof JSX.IntrinsicElements;
}

const VisuallyHidden = ({ children, tag, ...props }: VisuallyHiddenProps) => {
  const AsComponent = tag || "span";
  return <Span as={AsComponent} {...props}>{children}</Span>;
};

export { VisuallyHidden };
```

## 2. کامپوننت Table Loading (بر اساس کد واقعی Strapi)

### 2.1 ساختار Table Component

```typescript
// components/ui/table.tsx
import React, { createContext, useContext } from 'react';
import { styled } from 'styled-components';
import { Loader } from './loader';
import { EmptyStateLayout } from './empty-state-layout';

// Table Context دقیق مشابه Strapi
interface TableContextValue {
  colCount: number;
  hasHeaderCheckbox: boolean;
  headers: TableHeader[];
  isLoading: boolean;
  rowCount: number;
  rows: any[];
  selectedRows: any[];
  selectRow: (row: any | any[]) => void;
  setHasHeaderCheckbox: (value: boolean) => void;
}

const TableContext = createContext<TableContextValue | undefined>(undefined);

const useTable = <Selected,>(
  consumerName: string,
  selector: (value: TableContextValue) => Selected
): Selected => {
  const context = useContext(TableContext);
  if (!context) {
    throw new Error(`${consumerName} must be used within Table.Root`);
  }
  return selector(context);
};

// Table Components
interface TableRootProps {
  children?: React.ReactNode;
  headers?: TableHeader[];
  isLoading?: boolean;
  rows?: any[];
  selectedRows?: any[];
  onSelectedRowsChange?: (selectedRows: any[]) => void;
}

const TableRoot = ({
  children,
  headers = [],
  isLoading = false,
  rows = [],
  selectedRows: selectedRowsProps,
  onSelectedRowsChange,
}: TableRootProps) => {
  const [selectedRows, setSelectedRows] = React.useState<any[]>(selectedRowsProps || []);
  const [hasHeaderCheckbox, setHasHeaderCheckbox] = React.useState(false);
  
  const rowCount = rows.length + 1;
  const colCount = hasHeaderCheckbox ? headers.length + 1 : headers.length;

  const selectRow = (row: any | any[]) => {
    if (Array.isArray(row)) {
      setSelectedRows(row);
      onSelectedRowsChange?.(row);
    } else {
      setSelectedRows((prev = []) => {
        const currentRowIndex = prev.findIndex((r) => r.id === row.id);
        if (currentRowIndex > -1) {
          const newRows = prev.filter((_, index) => index !== currentRowIndex);
          onSelectedRowsChange?.(newRows);
          return newRows;
        }
        const newRows = [...prev, row];
        onSelectedRowsChange?.(newRows);
        return newRows;
      });
    }
  };

  const contextValue: TableContextValue = {
    colCount,
    hasHeaderCheckbox,
    headers,
    isLoading,
    rowCount,
    rows,
    selectedRows,
    selectRow,
    setHasHeaderCheckbox,
  };

  return (
    <TableContext.Provider value={contextValue}>
      {children}
    </TableContext.Provider>
  );
};

// Table Loading Component دقیق مشابه Strapi
const TableLoading = ({ children = 'Loading content' }: { children?: string }) => {
  const isLoading = useTable('Loading', (state) => state.isLoading);
  const colCount = useTable('Loading', (state) => state.colCount);

  if (!isLoading) {
    return null;
  }

  return (
    <tbody>
      <tr>
        <td colSpan={colCount}>
          <Flex justifyContent="center" padding={11} background="neutral0">
            <Loader>{children}</Loader>
          </Flex>
        </td>
      </tr>
    </tbody>
  );
};

// Table Empty Component دقیق مشابه Strapi
const TableEmpty = (props: any) => {
  const rows = useTable('Empty', (state) => state.rows);
  const isLoading = useTable('Empty', (state) => state.isLoading);
  const colCount = useTable('Empty', (state) => state.colCount);

  if (rows.length > 0 || isLoading) {
    return null;
  }

  return (
    <tbody>
      <tr>
        <td colSpan={colCount}>
          <EmptyStateLayout
            content="No content found"
            hasRadius={true}
            {...props}
          />
        </td>
      </tr>
    </tbody>
  );
};

// Table Body Component دقیق مشابه Strapi
const TableBody = ({ children }: { children: React.ReactNode }) => {
  const isLoading = useTable('Body', (state) => state.isLoading);
  const rows = useTable('Body', (state) => state.rows);

  if (isLoading || rows.length === 0) {
    return null;
  }

  return <tbody>{children}</tbody>;
};

// Export Table Components
export const Table = {
  Root: TableRoot,
  Loading: TableLoading,
  Empty: TableEmpty,
  Body: TableBody,
  // سایر کامپوننت‌ها...
};
```

## 3. کامپوننت Page Loading

### 3.1 ساختار Page Loading

```typescript
// components/ui/page-loading.tsx
import React from 'react';
import { styled } from 'styled-components';
import { Loader } from './loader';

const PageLoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 400px;
  width: 100%;
`;

const PageLoading = () => {
  return (
    <PageLoadingContainer>
      <Loader>Loading page...</Loader>
    </PageLoadingContainer>
  );
};

export { PageLoading };
```

## 4. کامپوننت Skeleton Loading

### 4.1 ساختار Skeleton Component

```typescript
// components/ui/skeleton.tsx
import React from 'react';
import { styled, keyframes } from 'styled-components';

const shimmer = keyframes`
  0% {
    background-position: -200px 0;
  }
  100% {
    background-position: calc(200px + 100%) 0;
  }
`;

const SkeletonBase = styled.div<{ $width?: string; $height?: string }>`
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${shimmer} 1.5s infinite;
  border-radius: 4px;
  width: ${({ $width }) => $width || '100%'};
  height: ${({ $height }) => $height || '20px'};
`;

interface SkeletonProps {
  width?: string;
  height?: string;
  className?: string;
}

const Skeleton = ({ width, height, className }: SkeletonProps) => {
  return (
    <SkeletonBase
      $width={width}
      $height={height}
      className={className}
    />
  );
};

// Table Row Skeleton
const TableRowSkeleton = ({ columns = 5 }: { columns?: number }) => {
  return (
    <tr>
      {Array.from({ length: columns }).map((_, index) => (
        <td key={index}>
          <Skeleton height="16px" />
        </td>
      ))}
    </tr>
  );
};

// Table Skeleton
const TableSkeleton = ({ rows = 5, columns = 5 }: { rows?: number; columns?: number }) => {
  return (
    <tbody>
      {Array.from({ length: rows }).map((_, index) => (
        <TableRowSkeleton key={index} columns={columns} />
      ))}
    </tbody>
  );
};

export { Skeleton, TableRowSkeleton, TableSkeleton };
```

## 5. نحوه استفاده در پروژه Next.js

### 5.1 استفاده در صفحات

```typescript
// pages/dashboard.tsx
import { useState, useEffect } from 'react';
import { Table } from '@/components/ui/table';
import { PageLoading } from '@/components/ui/page-loading';
import { Skeleton } from '@/components/ui/skeleton';

const DashboardPage = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [data, setData] = useState([]);

  useEffect(() => {
    // شبیه‌سازی لودینگ
    setTimeout(() => {
      setData([
        { id: 1, name: 'Item 1', email: 'item1@example.com' },
        { id: 2, name: 'Item 2', email: 'item2@example.com' },
      ]);
      setIsLoading(false);
    }, 2000);
  }, []);

  const headers = [
    { name: 'name', label: 'Name', sortable: true },
    { name: 'email', label: 'Email', sortable: true },
  ];

  if (isLoading) {
    return <PageLoading />;
  }

  return (
    <div>
      <h1>Dashboard</h1>
      <Table.Root rows={data} headers={headers} isLoading={isLoading}>
        <Table.Content>
          <Table.Head>
            {headers.map((header) => (
              <Table.HeaderCell key={header.name} {...header} />
            ))}
          </Table.Head>
          <Table.Loading />
          <Table.Empty />
          <Table.Body>
            {data.map((row) => (
              <Table.Row key={row.id}>
                <Table.Cell>{row.name}</Table.Cell>
                <Table.Cell>{row.email}</Table.Cell>
              </Table.Row>
            ))}
          </Table.Body>
        </Table.Content>
      </Table.Root>
    </div>
  );
};

export default DashboardPage;
```

### 5.2 استفاده در کامپوننت‌ها

```typescript
// components/data-table.tsx
import { Table } from '@/components/ui/table';
import { Skeleton } from '@/components/ui/skeleton';

interface DataTableProps {
  data: any[];
  isLoading: boolean;
  headers: any[];
}

const DataTable = ({ data, isLoading, headers }: DataTableProps) => {
  return (
    <Table.Root rows={data} headers={headers} isLoading={isLoading}>
      <Table.Content>
        <Table.Head>
          {headers.map((header) => (
            <Table.HeaderCell key={header.name} {...header} />
          ))}
        </Table.Head>
        <Table.Loading />
        <Table.Empty />
        <Table.Body>
          {data.map((row) => (
            <Table.Row key={row.id}>
              {headers.map((header) => (
                <Table.Cell key={header.name}>
                  {row[header.name]}
                </Table.Cell>
              ))}
            </Table.Row>
          ))}
        </Table.Body>
      </Table.Content>
    </Table.Root>
  );
};

export { DataTable };
```

## 6. تنظیمات Theme و Styling (دقیق مشابه Strapi)

### 6.1 تنظیمات Theme مشابه Strapi

```typescript
// styles/theme.ts
export const theme = {
  colors: {
    primary100: '#f0f0ff',
    primary200: '#d9d8ff',
    primary500: '#7b79ff',
    primary600: '#4945ff',
    primary700: '#271fe0',
    neutral0: '#ffffff',
    neutral100: '#f6f6f9',
    neutral150: '#eaeaef',
    neutral200: '#dcdce4',
    neutral300: '#c0c0cf',
    neutral400: '#a5a5ba',
    neutral500: '#8e8ea9',
    neutral600: '#666687',
    neutral700: '#4a4a6a',
    neutral800: '#32324d',
    neutral900: '#212134',
  },
  spaces: [
    '0px', '4px', '8px', '12px', '16px', '20px', 
    '24px', '32px', '40px', '48px', '56px', '64px'
  ],
  borderRadius: '4px',
  shadows: {
    filterShadow: '0px 1px 4px rgba(33, 33, 52, 0.1)',
    tableShadow: '0px 1px 4px rgba(33, 33, 52, 0.1)',
  },
  motion: {
    easings: {
      authenticMotion: 'cubic-bezier(.4,0,.2,1)',
    },
    timings: {
      '120': '120ms',
      '200': '200ms',
      '320': '320ms',
    },
  },
};
```

### 6.2 تنظیمات Styled Components

```typescript
// styles/global-styles.ts
import { createGlobalStyle } from 'styled-components';

export const GlobalStyles = createGlobalStyle`
  * {
    box-sizing: border-box;
  }

  body {
    margin: 0;
    padding: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  table {
    border-collapse: collapse;
    width: 100%;
  }

  th, td {
    padding: 16px;
    text-align: left;
    border-bottom: 1px solid #eaeaef;
  }

  th {
    background-color: #f6f6f9;
    font-weight: 600;
    color: #666687;
  }
`;
```

## 7. نکات مهم پیاده‌سازی

### 7.1 Accessibility (دقیق مشابه Strapi)

- استفاده از `role="alert"` و `aria-live="assertive"` برای Loader
- استفاده از `aria-hidden="true"` برای آیکون‌های تزئینی
- استفاده از `VisuallyHidden` برای متن‌های توصیفی

### 7.2 Performance (دقیق مشابه Strapi)

- استفاده از `will-change: transform` برای انیمیشن‌ها
- استفاده از `useCallback` و `useMemo` برای بهینه‌سازی
- استفاده از `React.memo` برای کامپوننت‌های سنگین

### 7.3 Responsive Design

- استفاده از واحدهای نسبی برای اندازه‌ها
- تنظیم breakpoint های مناسب
- استفاده از Flexbox و Grid برای layout

### 7.4 Error Handling

```typescript
// hooks/use-loading.ts
import { useState, useCallback } from 'react';

export const useLoading = (initialState = false) => {
  const [isLoading, setIsLoading] = useState(initialState);
  const [error, setError] = useState<string | null>(null);

  const startLoading = useCallback(() => {
    setIsLoading(true);
    setError(null);
  }, []);

  const stopLoading = useCallback(() => {
    setIsLoading(false);
  }, []);

  const setLoadingError = useCallback((errorMessage: string) => {
    setIsLoading(false);
    setError(errorMessage);
  }, []);

  return {
    isLoading,
    error,
    startLoading,
    stopLoading,
    setLoadingError,
  };
};
```

## 8. تست‌ها

### 8.1 Unit Tests

```typescript
// __tests__/components/ui/loader.test.tsx
import { render, screen } from '@testing-library/react';
import { Loader } from '@/components/ui/loader';

describe('Loader', () => {
  it('renders with default props', () => {
    render(<Loader />);
    const loader = screen.getByRole('alert');
    expect(loader).toBeInTheDocument();
  });

  it('renders with custom text', () => {
    render(<Loader>Custom loading text</Loader>);
    expect(screen.getByText('Custom loading text')).toBeInTheDocument();
  });

  it('applies small size class', () => {
    render(<Loader small />);
    const loader = screen.getByRole('alert');
    expect(loader).toHaveClass('small');
  });
});
```

## 9. نتیجه‌گیری

این مستندات نحوه پیاده‌سازی سیستم لودینگ کاملاً مشابه Strapi در Next.js را توضیح می‌دهد. با پیروی از این الگوها، می‌توانید:

1. **تجربه کاربری یکپارچه** ایجاد کنید
2. **Accessibility** مناسبی داشته باشید
3. **Performance** بهینه‌ای ارائه دهید
4. **Maintainability** کد را حفظ کنید

نکات کلیدی:
- استفاده از Context برای مدیریت state جدول
- پیاده‌سازی انیمیشن‌های نرم و طبیعی
- رعایت اصول Accessibility
- استفاده از TypeScript برای type safety
- تست‌نویسی مناسب برای اطمینان از عملکرد صحیح

**نکته مهم**: تمام کدهای ارائه شده در این مستندات بر اساس بررسی دقیق کدهای واقعی Strapi نوشته شده‌اند و کاملاً مشابه عملکرد اصلی Strapi هستند.
